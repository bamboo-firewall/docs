---
- name: OS checking and playbook decision
  block:
    - name: Define OS
      set_fact:
        os_names: "{{ OS_DISTRIBUTION_VALID | map(attribute='name') | list }}"
        os_variants: "{{ OS_DISTRIBUTION_VALID | selectattr('variants', 'defined') | map(attribute='variants') | flatten | list }}"
        find_distribution: >-
          {{
            (OS_DISTRIBUTION_VALID | selectattr('name', 'equalto', ansible_facts['distribution']) | list) + 
            (OS_DISTRIBUTION_VALID | selectattr('variants', 'defined') | selectattr('variants', 'contains', ansible_facts['distribution']) | list)
          }}
        os_major_version: "{{ ansible_facts['distribution_version'].split('.')[0] }}"

    - name: Check if OS is supported
      set_fact:
        os_supported: >-
          {% if find_distribution | length > 0 %}
            {% set os_info = find_distribution[0] %}
            {% if os_info.versions is not defined or os_major_version | float in os_info.versions %}
              1
            {% else %}
              0
            {% endif %}
          {% else %}
            -1
          {% endif %}
          
    - name: Assert OS is supported
      assert:
        that: os_supported|int== 1
        fail_msg: >-
          {% if  os_supported|int == 0 %}
            The current version {{ ansible_facts['distribution_version'] }} is not supported for {{ ansible_facts['distribution'] }}.
            Supported versions for {{ ansible_facts['distribution'] }} are: {{ find_distribution[0].versions }}.
          {% else %}
            Current operating system {{ ansible_facts['distribution'] }} is not supported.
            This playbook requires the OS to be one of the following {{ os_names + os_variants }}.
          {% endif %}
        success_msg: "The operating system {{ ansible_facts['distribution'] }} version {{ ansible_facts['distribution_version'] }} is allowed."

- name: Default execution for all supported distribution
  block:
    - name: Install pre-requisite packages for calico-felix agent
      ansible.builtin.package:
        name: ipset
        state: present

    - name: Build hosts file
      lineinfile:
        path: /etc/hosts
        line: '{{ ansible_ssh_host }} {{ name }}'
        create: true
      tags: update_hostname

    - name: Set hostname
      shell: hostnamectl set-hostname '{{ name }}'
      args:
        warn: false

    - name: Build hosts file for etcd
      lineinfile:
        path: /etc/hosts
        line: '{{ item }}'
        create: yes
      loop:
      - "{{ manage_node }} etcd1"
      - "{{ manage_node }} etcd2"
      - "{{ manage_node }} etcd3"

    - name: Download bamboofw-agent
      get_url:
        url: https://github.com/bamboo-firewall/calico/releases/download/v0.0.1/calico-felix-amd64.tar.gz
        dest: /tmp/calico-felix-amd64.tar.gz
        mode: '0644'

    - name: Extract felix bin file
      unarchive:
        src: /tmp/calico-felix-amd64.tar.gz
        dest: /usr/local/bin/
        owner: root
        group: root
        mode: 0755
        remote_src: True

    - name: "Create directory for calico configuration"
      file:
        path: /etc/calico
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Create configuration file for calico"
      template:
        src: templates/felix.cfg.j2
        dest: /etc/calico/felix.cfg
        owner: root
        group: root
        mode: 0600

    - name: "Create directory for calico SSL configuration"
      file:
        path: /etc/calico/ssl
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy ssl file 
      copy:
        content: "{{ item.file_var }}"
        dest: "/etc/calico/ssl/{{ item.file_name }}"
      with_items:
        - { file_var: "{{ ca_cert }}", file_name: ca.pem }
        - { file_var: "{{ cert }}", file_name: etcd.pem }
        - { file_var: "{{ key }}", file_name: etcd-key.pem }  

    - name: "Ensure systemd directory exists and create a calico service"
      block:
        - name: Check if systemd directory exists
          stat:
            path: /lib/systemd/system
          register: systemd_dir

        - name: Ensure systemd directory is present
          command: mkdir -p /lib/systemd/system
          when: not systemd_dir.stat.exists

        - name: Create a calico service
          template:
            src: templates/calico.service.j2
            dest: /lib/systemd/system/calico-felix.service
            owner: root
            group: root
            mode: 0644

    - name: "Set external lib if OS is too old"
      shell: sudo patchelf --set-interpreter /usr/local/glibc-2.22/lib/ld-linux-x86-64.so.2 --set-rpath /usr/local/glibc-2.22/lib:/usr/lib64 /usr/local/bin/calico-felix-amd64
      when:
      - ansible_facts['distribution'] != 'Ubuntu'
      - os_major_version == '7'

    - name: "Reload calico service"
      systemd:
        name: calico-felix
        state: restarted
        daemon_reload: true
        enabled: true